package orlov.daniil.timerfordolcegustomachines.data;

import androidx.annotation.NonNull;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

public final class InitData {
    private enum CapTypes {
        COFFEE, MILK, TEA, CHOCOLATE;

        @NonNull
        @Override
        public String toString() {
            return name().toLowerCase() + " capsule";
        }
    }

    public final static String[] brewNames = {
            "Espresso",
            "Espresso Decaffeinato",
            "Espresso Intenso",
            "Espresso Intenso Decaffeinato",
            "Yunnan Espresso",
            "Espresso Caramel",
            "Espresso Buondi",
            "Ristretto",
            "Ristretto Ardenza",
            "Espresso Barista",
            "Sical",
            "Bonka Espresso",
            "Caffè Americano",
            "Americano Intenso",
            "Grande Aroma",
            "Grande Caffè Crema",
            "Medium Roast",
            "Grande Intenso",
            "Dark Roast",
            "Grande Mild",
            "Morning Blend",
            "Zoégas Dark Temptation",
            "Zoégas Intenzo",
            "Zoégas Mollbergs Blandning",
            "Zoégas Skånerost",
            "Dallmayr Crema D'Oro",
            "Dallmayr Prodomo",
            "Caffè Lungo",
            "Regular Blend",
            "Caffè Lungo Decaffeinato",
            "Regular Blend Decaffeinato",
            "Caffè Lungo Intenso",
            "Roast Blend",
            "Caffè Lungo Mild",
            "Caffè Buongiorno",
            "Café Au Lait",
            "Ricoré Latte",
            "Cortado",
            "Espresso Macchiato",
            "Cortado Decaffeinato",
            "Espresso Macchiato Decaffeinato",
            "Cappuccino",
            "Cappuccino Skinny",
            "Cappuccino Light",
            "Cappuccino Ice",
            "Freddo Cappuccino",
            "Iced Coffee Blend",
            "Latte Macchiato",
            "Latte Macchiato Skinny",
            "Latte Macchiato Light",
            "Latte Macchiato Vanilla",
            "Latte Macchiato Caramel",
            "Latte Macchiato Unsweetened",
            "Mocha",
            "Milo",
            "Chococino",
            "Chocoletto",
            "Chococino Caramel",
            "Nesquik",
            "Nescau",
            "Nestea Lemon",
            "Nestea Peach",
            "Marrakesh Style Tea",
            "Macaron Green Tea",
            "Citrus Honey Black Tea",
            "Chai Tea Latte",
            "Tea Latte",
            "Green Tea Latte"};

    private final static List<Brew> brewList =
            Arrays.asList(
                    new Brew(brewNames[0], false, false, "#b1175d"),
                    new Brew(brewNames[1], false, false, "#b1175d"),
                    new Brew(brewNames[2], false, false, "#53514f"),
                    new Brew(brewNames[3], false, false, "#53514f"),
                    new Brew(brewNames[4], false, false, "#e10829"),
                    new Brew(brewNames[5], false, false, "#ba7118"),
                    new Brew(brewNames[6], false, false, "#d41713"),
                    new Brew(brewNames[7], false, false, "#006e5e"),
                    new Brew(brewNames[8], false, false, "#282f86"),
                    new Brew(brewNames[9], false, false, "#9b9b9b"),
                    new Brew(brewNames[10], false, false, "#a9001d"),
                    new Brew(brewNames[11], false, false, "#0b3c5d"),
                    new Brew(brewNames[12], false, false, "#af183b"),
                    new Brew(brewNames[13], false, false, "#846f5c"),
                    new Brew(brewNames[14], false, false, "#faec44"),
                    new Brew(brewNames[15], false, false, "#faec44"),
                    new Brew(brewNames[16], false, false, "#faec44"),
                    new Brew(brewNames[17], false, false, "#c06023"),
                    new Brew(brewNames[18], false, false, "#c06023"),
                    new Brew(brewNames[19], false, false, "#ffd589"),
                    new Brew(brewNames[20], false, false, "#ffd589"),
                    new Brew(brewNames[21], false, false, "#ae6d33"),
                    new Brew(brewNames[22], false, false, "#ffcd00"),
                    new Brew(brewNames[23], false, false, "#ab1224"),
                    new Brew(brewNames[24], false, false, "#41732c"),
                    new Brew(brewNames[25], false, false, "#302d21"),
                    new Brew(brewNames[26], false, false, "#957544"),
                    new Brew(brewNames[27], false, false, "#c84727"),
                    new Brew(brewNames[28], false, false, "#c84727"),
                    new Brew(brewNames[29], false, false, "#c84727"),
                    new Brew(brewNames[30], false, false, "#c84727"),
                    new Brew(brewNames[31], false, false, "#863a20"),
                    new Brew(brewNames[32], false, false, "#863a20"),
                    new Brew(brewNames[33], false, false, "#f6ac7f"),
                    new Brew(brewNames[34], false, false, "#8e3c24"),
                    new Brew(brewNames[35], false, false, "#ac7b5e"),
                    new Brew(brewNames[36], false, false, "#ffdb00"),
                    new Brew(brewNames[37], false, false, "#d8ae84"),
                    new Brew(brewNames[38], false, false, "#d8ae84"),
                    new Brew(brewNames[39], false, false, "#d8ae84"),
                    new Brew(brewNames[40], false, false, "#d8ae84"),
                    new Brew(brewNames[41], false, true, "#cacf01"),
                    new Brew(brewNames[42], false, true, "#cacf01"),
                    new Brew(brewNames[43], false, true, "#cacf01"),
                    new Brew(brewNames[44], false, true, "#01aadc"),
                    new Brew(brewNames[45], false, true, "#0076a8"),
                    new Brew(brewNames[46], false, false, "#0caae9"),
                    new Brew(brewNames[47], false, true, "#f0a517"),
                    new Brew(brewNames[48], false, true, "#f0a517"),
                    new Brew(brewNames[49], false, true, "#f0a517"),
                    new Brew(brewNames[50], false, true, "#fcc74b"),
                    new Brew(brewNames[51], false, true, "#e8690a"),
                    new Brew(brewNames[52], false, true, "#f59c00"),
                    new Brew(brewNames[53], false, true, "#532683"),
                    new Brew(brewNames[54], false, true, "#2fb04b"),
                    new Brew(brewNames[55], false, true, "#793a29"),
                    new Brew(brewNames[56], false, true, "#793a29"),
                    new Brew(brewNames[57], false, true, "#9a3488"),
                    new Brew(brewNames[58], false, false, "#feed01"),
                    new Brew(brewNames[59], false, false, "#db2f2b"),
                    new Brew(brewNames[60], false, false, "#feda00"),
                    new Brew(brewNames[61], false, false, "#ef9740"),
                    new Brew(brewNames[62], false, false, "#00906f"),
                    new Brew(brewNames[63], false, false, "#df4291"),
                    new Brew(brewNames[64], false, false, "#82bc4b"),
                    new Brew(brewNames[65], false, true, "#a64588"),
                    new Brew(brewNames[66], false, true, "#b41363"),
                    new Brew(brewNames[67], false, true, "#5f8e33")
            );

    protected static String[] getBrewNames() {
        return brewNames;
    }

    protected static List<Brew> getBrewList() {
        return brewList;
    }

    protected static List<Capsule> getCapsuleList(Map<String, Integer> brewIds) {
        List<Capsule> capsuleList = Arrays.asList(
                new Capsule(brewIds.get(brewNames[0]), CapTypes.COFFEE.toString(), 50, 14),
                new Capsule(brewIds.get(brewNames[1]), CapTypes.COFFEE.toString(), 50, 14),
                new Capsule(brewIds.get(brewNames[2]), CapTypes.COFFEE.toString(), 50, 14),
                new Capsule(brewIds.get(brewNames[3]), CapTypes.COFFEE.toString(), 50, 14),
                new Capsule(brewIds.get(brewNames[4]), CapTypes.COFFEE.toString(), 50, 14),
                new Capsule(brewIds.get(brewNames[5]), CapTypes.COFFEE.toString(), 50, 15),
                new Capsule(brewIds.get(brewNames[6]), CapTypes.COFFEE.toString(), 40, 13),
                new Capsule(brewIds.get(brewNames[7]), CapTypes.COFFEE.toString(), 35, 12),
                new Capsule(brewIds.get(brewNames[8]), CapTypes.COFFEE.toString(), 35, 12),
                new Capsule(brewIds.get(brewNames[9]), CapTypes.COFFEE.toString(), 35, 12),
                new Capsule(brewIds.get(brewNames[10]), CapTypes.COFFEE.toString(), 35, 12),
                new Capsule(brewIds.get(brewNames[11]), CapTypes.COFFEE.toString(), 35, 12),
                new Capsule(brewIds.get(brewNames[12]), CapTypes.COFFEE.toString(), 230, 53),
                new Capsule(brewIds.get(brewNames[13]), CapTypes.COFFEE.toString(), 230, 53),
                new Capsule(brewIds.get(brewNames[14]), CapTypes.COFFEE.toString(), 200, 42),
                new Capsule(brewIds.get(brewNames[15]), CapTypes.COFFEE.toString(), 200, 42),
                new Capsule(brewIds.get(brewNames[16]), CapTypes.COFFEE.toString(), 200, 42),
                new Capsule(brewIds.get(brewNames[17]), CapTypes.COFFEE.toString(), 180, 45),
                new Capsule(brewIds.get(brewNames[18]), CapTypes.COFFEE.toString(), 180, 45),
                new Capsule(brewIds.get(brewNames[19]), CapTypes.COFFEE.toString(), 180, 37),
                new Capsule(brewIds.get(brewNames[20]), CapTypes.COFFEE.toString(), 180, 37),
                new Capsule(brewIds.get(brewNames[21]), CapTypes.COFFEE.toString(), 180, 37),
                new Capsule(brewIds.get(brewNames[22]), CapTypes.COFFEE.toString(), 180, 37),
                new Capsule(brewIds.get(brewNames[23]), CapTypes.COFFEE.toString(), 180, 37),
                new Capsule(brewIds.get(brewNames[24]), CapTypes.COFFEE.toString(), 180, 37),
                new Capsule(brewIds.get(brewNames[25]), CapTypes.COFFEE.toString(), 130, 30),
                new Capsule(brewIds.get(brewNames[26]), CapTypes.COFFEE.toString(), 130, 30),
                new Capsule(brewIds.get(brewNames[27]), CapTypes.COFFEE.toString(), 120, 28),
                new Capsule(brewIds.get(brewNames[28]), CapTypes.COFFEE.toString(), 120, 28),
                new Capsule(brewIds.get(brewNames[29]), CapTypes.COFFEE.toString(), 120, 28),
                new Capsule(brewIds.get(brewNames[30]), CapTypes.COFFEE.toString(), 120, 28),
                new Capsule(brewIds.get(brewNames[31]), CapTypes.COFFEE.toString(), 120, 28),
                new Capsule(brewIds.get(brewNames[32]), CapTypes.COFFEE.toString(), 120, 28),
                new Capsule(brewIds.get(brewNames[33]), CapTypes.COFFEE.toString(), 120, 28),
                new Capsule(brewIds.get(brewNames[34]), CapTypes.COFFEE.toString(), 120, 28),
                new Capsule(brewIds.get(brewNames[35]), CapTypes.COFFEE.toString(), 180, 33),
                new Capsule(brewIds.get(brewNames[36]), CapTypes.COFFEE.toString(), 180, 33),
                new Capsule(brewIds.get(brewNames[37]), CapTypes.COFFEE.toString(), 80, 16),
                new Capsule(brewIds.get(brewNames[38]), CapTypes.COFFEE.toString(), 80, 16),
                new Capsule(brewIds.get(brewNames[39]), CapTypes.COFFEE.toString(), 80, 16),
                new Capsule(brewIds.get(brewNames[40]), CapTypes.COFFEE.toString(), 80, 16),
                new Capsule(brewIds.get(brewNames[41]), CapTypes.MILK.toString(), 200, 35),
                new Capsule(brewIds.get(brewNames[41]), CapTypes.COFFEE.toString(), 40, 13),
                new Capsule(brewIds.get(brewNames[42]), CapTypes.MILK.toString(), 200, 35),
                new Capsule(brewIds.get(brewNames[42]), CapTypes.COFFEE.toString(), 40, 13),
                new Capsule(brewIds.get(brewNames[43]), CapTypes.MILK.toString(), 200, 35),
                new Capsule(brewIds.get(brewNames[43]), CapTypes.COFFEE.toString(), 40, 13),
                new Capsule(brewIds.get(brewNames[44]), CapTypes.MILK.toString(), 135, 25),
                new Capsule(brewIds.get(brewNames[44]), CapTypes.COFFEE.toString(), 105, 25),
                new Capsule(brewIds.get(brewNames[45]), CapTypes.MILK.toString(), 90, 18),
                new Capsule(brewIds.get(brewNames[45]), CapTypes.COFFEE.toString(), 90, 18),
                new Capsule(brewIds.get(brewNames[46]), CapTypes.COFFEE.toString(), 90, 25),
                new Capsule(brewIds.get(brewNames[47]), CapTypes.MILK.toString(), 170, 30),
                new Capsule(brewIds.get(brewNames[47]), CapTypes.COFFEE.toString(), 50, 14),
                new Capsule(brewIds.get(brewNames[48]), CapTypes.MILK.toString(), 170, 30),
                new Capsule(brewIds.get(brewNames[48]), CapTypes.COFFEE.toString(), 50, 14),
                new Capsule(brewIds.get(brewNames[49]), CapTypes.MILK.toString(), 170, 30),
                new Capsule(brewIds.get(brewNames[49]), CapTypes.COFFEE.toString(), 50, 14),
                new Capsule(brewIds.get(brewNames[50]), CapTypes.MILK.toString(), 170, 30),
                new Capsule(brewIds.get(brewNames[50]), CapTypes.COFFEE.toString(), 50, 14),
                new Capsule(brewIds.get(brewNames[51]), CapTypes.MILK.toString(), 170, 30),
                new Capsule(brewIds.get(brewNames[51]), CapTypes.COFFEE.toString(), 50, 14),
                new Capsule(brewIds.get(brewNames[52]), CapTypes.MILK.toString(), 170, 30),
                new Capsule(brewIds.get(brewNames[52]), CapTypes.COFFEE.toString(), 50, 14),
                new Capsule(brewIds.get(brewNames[53]), CapTypes.COFFEE.toString(), 110, 21),
                new Capsule(brewIds.get(brewNames[53]), CapTypes.MILK.toString(), 110, 19),
                new Capsule(brewIds.get(brewNames[54]), CapTypes.CHOCOLATE.toString(), 90, 17),
                new Capsule(brewIds.get(brewNames[54]), CapTypes.MILK.toString(), 100, 17),
                new Capsule(brewIds.get(brewNames[55]), CapTypes.CHOCOLATE.toString(), 100, 19),
                new Capsule(brewIds.get(brewNames[55]), CapTypes.MILK.toString(), 110, 22),
                new Capsule(brewIds.get(brewNames[56]), CapTypes.CHOCOLATE.toString(), 100, 19),
                new Capsule(brewIds.get(brewNames[56]), CapTypes.MILK.toString(), 110, 22),
                new Capsule(brewIds.get(brewNames[57]), CapTypes.MILK.toString(), 100, 19),
                new Capsule(brewIds.get(brewNames[57]), CapTypes.CHOCOLATE.toString(), 110, 22),
                new Capsule(brewIds.get(brewNames[58]), CapTypes.CHOCOLATE.toString(), 150, 26),
                new Capsule(brewIds.get(brewNames[59]), CapTypes.CHOCOLATE.toString(), 110, 22),
                new Capsule(brewIds.get(brewNames[60]), CapTypes.TEA.toString(), 200, 38),
                new Capsule(brewIds.get(brewNames[61]), CapTypes.TEA.toString(), 200, 38),
                new Capsule(brewIds.get(brewNames[62]), CapTypes.TEA.toString(), 150, 29),
                new Capsule(brewIds.get(brewNames[63]), CapTypes.TEA.toString(), 150, 29),
                new Capsule(brewIds.get(brewNames[64]), CapTypes.TEA.toString(), 150, 29),
                new Capsule(brewIds.get(brewNames[65]), CapTypes.MILK.toString(), 120, 22),
                new Capsule(brewIds.get(brewNames[65]), CapTypes.TEA.toString(), 100, 22),
                new Capsule(brewIds.get(brewNames[66]), CapTypes.MILK.toString(), 120, 22),
                new Capsule(brewIds.get(brewNames[66]), CapTypes.TEA.toString(), 100, 22),
                new Capsule(brewIds.get(brewNames[67]), CapTypes.MILK.toString(), 120, 22),
                new Capsule(brewIds.get(brewNames[67]), CapTypes.TEA.toString(), 100, 22)
        );
        return capsuleList;
    }
}
